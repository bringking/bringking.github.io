<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coding in the basement]]></title>
  <link href="http://charlesbking.com/atom.xml" rel="self"/>
  <link href="http://charlesbking.com/"/>
  <updated>2014-03-09T21:51:52-07:00</updated>
  <id>http://charlesbking.com/</id>
  <author>
    <name><![CDATA[Charles King]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lazy Model: An ngModel-ish Binding Handler for KnockoutJS]]></title>
    <link href="http://charlesbking.com/blog/2014/03/09/an-ngmodel-binding-handler-for-knockoutjs/"/>
    <updated>2014-03-09T16:40:00-07:00</updated>
    <id>http://charlesbking.com/blog/2014/03/09/an-ngmodel-binding-handler-for-knockoutjs</id>
    <content type="html"><![CDATA[<p>After spending some time building my first production Angular app (which is great), the  <strong><a href="http://docs.angularjs.org/api/ng/directive/ngModel">ngModel</a></strong> directive struck me as being immediately useful, compared to the traditional KnockoutJS workflow. So I replicated some of the behavior with a &ldquo;lazy model&rdquo; binding handler.</p>

<!-- more -->


<h2>ngModel</h2>

<p>The part that I found particuarly useful with ngModel is that it <strong>creates</strong> and exposes the model property to the UI for binding. Therefore, you can describe an observable model object that doesn&rsquo;t exist yet, and it will be created for you.</p>

<figure class='code'><figcaption><span>Angular ngModel-html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html+lasso'><span class='line'> <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;Ctrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;my-input&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Angular ngModel-code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Ctrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//nothing here, but the name variable is created on the controllers $scope </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Knockout</h2>

<p>Comparing this to knockout, you can see that you have to do a little more work to achieve the same result.</p>

<figure class='code'><figcaption><span>Knockout BasicVm-html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html+lasso'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: name&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Knockout BasicVM-code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span>  <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="nx">vm</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>My main problem with the Knockout way, is that I have to describe my bindable model object in two places now, the view and the Viewmodel. To bring a little simplification to this process, I created a new binding handler to handle the implicit creation for me.</p>

<h2>Lazy Model</h2>

<figure class='code'><figcaption><span>Knockout Lazy-Model html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html+lasso'><span class='line'><span class="c">&lt;!-- ko model: {value:&#39;name&#39;,target:model} --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: model.name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- /ko --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- ko model: {value:&#39;address&#39;,target:model} --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: model.address&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- /ko --&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Knockout Lazy-Model code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span>  <span class="p">{</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span><span class="p">{}</span> <span class="c1">//empty model that view objects get lazily added to</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, you can think of the <strong>model</strong> object as being our <strong>$scope</strong>. Whenever you declare an observable to bind in the UI, it will get implicty created onto the model object as an observable value. In this way, you have only described your model properties in one place. An added bonus is a really clean viewmodel.</p>

<p>The best part about this particular implementation, is that is can even get complex, with property path syntax, e.g.</p>

<figure class='code'><figcaption><span>Knockout Lazy-Model html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html+lasso'><span class='line'><span class="c">&lt;!-- ko model: {value:&#39;name&#39;,target:model} --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: model.name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- /ko --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- ko model: {value:&#39;address.city&#39;,target:model} --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: model.address.city&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- /ko --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- ko model: {value:&#39;address.zip&#39;,target:model} --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value: model.address.zip&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- /ko --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would result in an object that on the viewmodel that looks like &ndash;</p>

<figure class='code'><figcaption><span>Resultant lazily created object </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">model</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">address</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">city</span><span class="o">:</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">zip</span><span class="o">:</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> What are the drawbacks with a pattern like this? This is most useful for simple form controls where you don&rsquo;t need to access advanced observable functions like extenders, or manual subscriptions. You could still do those things, but since your model properties are being lazily created, you would have to modify the method with another way to access the lazily created values. This could be something like a callback with the key and observable value to bind subscriptions to.</p>

<figure class='code'><figcaption><span>Knockout Lazy-Model html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html+lasso'><span class='line'>     <span class="c">&lt;!-- ko model: {value:&#39;name&#39;,target:model,onCreate:created} --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">required</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-bind=</span><span class="s">&quot;value:model.name, valueUpdate: &#39;keydown&#39;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- /ko --&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/bringking/9459485">Here</a> is a gist of a working implementation, but feel free to modify and extend if you find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reusable UI Controls With KnockoutJS]]></title>
    <link href="http://charlesbking.com/blog/2014/01/18/reusable-ui-controls-with-knockoutjs/"/>
    <updated>2014-01-18T19:39:59-07:00</updated>
    <id>http://charlesbking.com/blog/2014/01/18/reusable-ui-controls-with-knockoutjs</id>
    <content type="html"><![CDATA[<p>When developing large applications, it&rsquo;s best practice to use some level of the <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> principle, and attempt to create reusable modules, components, and code wherever possible. Unfortunately, adhering to this principle with KnockoutJS it not as straight-forward as it could be.</p>

<!-- more -->


<h2>The problem</h2>

<p>The problem.. well it&rsquo;s not really a problem, it&rsquo;s just the way KnockoutJS was designed. KnockoutJS is more of a library for doing <a href="http://en.wikipedia.org/wiki/Model_View_ViewModel">MVVM</a>, than a framework that has opinions on how you re-use your code. There are a few frameworks out there that attempt to solve this issue, and do it very well.</p>

<ul>
<li><a href="http://durandaljs.com/">Durandal</a> is a great framework that builds on Knockout to provide things like <a href="http://durandaljs.com/documentation/Creating-A-Module/">modules</a>, <a href="http://durandaljs.com/documentation/Creating-A-View/">views</a> and a router. It is really more comparable to AngularJS or Ember, than to vanilla Knockout.</li>
<li><a href="http://stoodder.github.io/falconjs/">Falcon.js</a> Falcon is a relative newcomer, and admittedly  I have not used it, but it introduces Objects, Models and Views to help give Knockout some structure.</li>
</ul>


<p>However, what if you are already invested in a large vanilla Knockout codebase and don&rsquo;t want to introduce a new framework? You can use some clever binding handlers.</p>

<h2>Reusable binding handlers</h2>

<p>Using Knockout&rsquo;s <a href="http://knockoutjs.com/documentation/custom-bindings.html">bindingHandlers</a> and in-line <a href="http://knockoutjs.com/documentation/template-binding.html">template</a> engine, you can generate reusable UI controls that are fully portable, and can be introduced into any viewmodel.</p>

<p>To demo this, lets put together a simple hierarchical tree-view, that can be given a set of JSON, display it and track selections. Start with the bindingHandler that is appropriately called <strong>treeView</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>      <span class="nx">ko</span><span class="p">.</span><span class="nx">bindingHandlers</span><span class="p">.</span><span class="nx">treeView</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">valueAccessor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//style element</span>
</span><span class='line'>          <span class="nx">element</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">&quot;ko-treeview-container&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">//let this handler control its descendants. </span>
</span><span class='line'>           <span class="k">return</span> <span class="p">{</span> <span class="nx">controlsDescendantBindings</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this block, we have the initialize function for the bindingHandler that will run when Knockout binds to the View. The key to making this bindingHandler reusable, is the return value. <strong>controlsDescendantBindings: true</strong> tells Knockout to stop the parent context from trying to bind against this elements children, giving our bindingHandler full control over its bound element. The Knockout <a href="http://knockoutjs.com/documentation/custom-bindings-controlling-descendant-bindings.html">documentation</a> goes over this in more detail. Also, I am adding a CSS class to the bound container at runtime, so it can be controlled with an included stylesheet.</p>

<p>Next lets add some options to the valueAccessor, to build the API that you will use to control the element.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>          <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">valueAccessor</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">data</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;ko.bindingHandlers.treeView: No data to display&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//extend options with search</span>
</span><span class='line'>          <span class="nx">options</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//set default data values</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">label</span><span class="p">)</span> <span class="nx">options</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">childNode</span><span class="p">)</span> <span class="nx">options</span><span class="p">.</span><span class="nx">childNode</span> <span class="o">=</span> <span class="s1">&#39;children&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get a reference to the valueAccessor() and add an observable <strong>options.search</strong> to allow the user to filter the view by keyword. Also, we allow the user to pass in the value of the <strong>label</strong> (this will serve as a unique id for the node) for each tree node, and the property <strong>childNode</strong> to specify the object property to search for child nodes. With this we have enough information to build the UI.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>        <span class="nx">createNodes</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">rootElement</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//Root node template containing a list of the top level nodes in the data set</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">rootTmpl</span> <span class="o">=</span> <span class="s1">&#39;&lt;script id=&quot;ko-treeview-root-tmpl&quot;&gt;&lt;div class=&quot;navbar&quot;&gt;&lt;p class=&quot;brand&quot; data-bind=&quot;text:$data.title&quot;&gt;Title&lt;/p&gt;&lt;div class=&quot;container&quot;&gt;&lt;form class=&quot;navbar-form pull-right col-sm-4&quot;&gt;&lt;div class=&quot;input-append&quot;&gt;&lt;input class=&quot;span4&quot; type=&quot;text&quot; placeholder=&quot;Search&quot; data-bind=&quot;value:$data.search, valueUpdate: \&#39;afterkeydown\&#39;&quot;/&gt;&lt;span class=&quot;add-on&quot;&gt;&lt;i class=&quot;icon-search&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul class=&quot;ko-treeview-list&quot; data-bind=&quot;template:{foreach:$data.data,name:\&#39;ko-treeview-node-tmpl\&#39;}&quot;&gt;&lt;/ul&gt;&lt;/script&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//the template to display each node, notice the recursive template binding with UL</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">nodeTmpl</span> <span class="o">=</span> <span class="s1">&#39;&lt;script id=&quot;ko-treeview-node-tmpl&quot;&gt;&lt;li class=&quot;ko-treeview-listitem&quot;&gt;&lt;div data-bind=&quot;template:{name:\&#39;ko-treeview-item-tmpl\&#39;,data:$data}&quot;&gt;&lt;/div&gt;&lt;ul class=&quot;ko-treeview-list&quot; data-bind=&quot;template:{name:\&#39;ko-treeview-node-tmpl\&#39;,foreach:$data[$root.childNode]}&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;/script&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//the item inside the node, a checkbox and a label.</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">itemTmpl</span> <span class="o">=</span><span class="s1">&#39;&lt;script id=&quot;ko-treeview-item-tmpl&quot;&gt;&lt;div data-bind=&quot;visible:$data[$root.label].indexOf($root.search()) &gt; -1&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;ko-treeview-cb&quot; data-bind=&quot;checked: $root.selected, attr:{value:$data[$root.label], id:$data[$root.label]}&quot;  /&gt;&lt;label  class=&quot;ko-treeview-label&quot; data-bind=&quot;text:$data[$root.label], attr:{for:$data[$root.label]}&quot;&gt;&lt;/label&gt;&lt;/div&gt;&lt;/script&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//append templates</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ko-treeview-root-tmpl&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertAdjacentHTML</span><span class="p">(</span><span class="s1">&#39;beforeend&#39;</span><span class="p">,</span> <span class="nx">rootTmpl</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ko-treeview-node-tmpl&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertAdjacentHTML</span><span class="p">(</span><span class="s1">&#39;beforeend&#39;</span><span class="p">,</span> <span class="nx">nodeTmpl</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ko-treeview-item-tmpl&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertAdjacentHTML</span><span class="p">(</span><span class="s1">&#39;beforeend&#39;</span><span class="p">,</span> <span class="nx">itemTmpl</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">//apply first binding</span>
</span><span class='line'>       <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindingsToNode</span><span class="p">(</span><span class="nx">rootElement</span><span class="p">,{</span><span class="nx">template</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;ko-treeview-root-tmpl&quot;</span><span class="p">}},</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>There is a lot that I just added there, but the heavy lifting of the <strong>createNodes</strong> function is all done by Knockout&rsquo;s template engine. In this case, the templates are the outer list, each node, and the items in the node. The most important piece for the treeView; is the node template. The node template is recursively generating any child items the node contains.  Finally, we need to apply the template binding to the rootElement using <strong>ko.applyBindingsToNode.</strong> ko.applyBindingsToNode allows us to specify bindings to an element, and the context for those bindings.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>        <span class="c1">//create the tree</span>
</span><span class='line'>         <span class="nx">ko</span><span class="p">.</span><span class="nx">bindingHandlers</span><span class="p">.</span><span class="nx">treeView</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>         <span class="nx">valueAccessor</span><span class="p">().</span><span class="nx">data</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">ko</span><span class="p">.</span><span class="nx">bindingHandlers</span><span class="p">.</span><span class="nx">treeView</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we can finish up by running the <strong>createNodes</strong> function on init, and subscribing to the data set to refresh the treeView if the data changes. Let&rsquo;s see the final product.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>     <span class="nx">ko</span><span class="p">.</span><span class="nx">bindingHandlers</span><span class="p">.</span><span class="nx">treeView</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">createNodes</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">rootElement</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//Root node template containing a list of the top level nodes in the data set</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">rootTmpl</span> <span class="o">=</span> <span class="s1">&#39;&lt;script id=&quot;ko-treeview-root-tmpl&quot;&gt;&lt;div class=&quot;navbar&quot;&gt;&lt;p class=&quot;brand&quot; data-bind=&quot;text:$data.title&quot;&gt;Title&lt;/p&gt;&lt;div class=&quot;container&quot;&gt;&lt;form class=&quot;navbar-form pull-right col-sm-4&quot;&gt;&lt;div class=&quot;input-append&quot;&gt;&lt;input class=&quot;span4&quot; type=&quot;text&quot; placeholder=&quot;Search&quot; data-bind=&quot;value:$data.search, valueUpdate: \&#39;afterkeydown\&#39;&quot;/&gt;&lt;span class=&quot;add-on&quot;&gt;&lt;i class=&quot;icon-search&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul class=&quot;ko-treeview-list&quot; data-bind=&quot;template:{foreach:$data.data,name:\&#39;ko-treeview-node-tmpl\&#39;}&quot;&gt;&lt;/ul&gt;&lt;/script&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//the template to display each node, notice the recursive template binding with UL</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">nodeTmpl</span> <span class="o">=</span> <span class="s1">&#39;&lt;script id=&quot;ko-treeview-node-tmpl&quot;&gt;&lt;li class=&quot;ko-treeview-listitem&quot;&gt;&lt;div data-bind=&quot;template:{name:\&#39;ko-treeview-item-tmpl\&#39;,data:$data}&quot;&gt;&lt;/div&gt;&lt;ul class=&quot;ko-treeview-list&quot; data-bind=&quot;template:{name:\&#39;ko-treeview-node-tmpl\&#39;,foreach:$data[$root.childNode]}&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;/script&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">//the item inside the node, a checkbox and a label.</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">itemTmpl</span> <span class="o">=</span><span class="s1">&#39;&lt;script id=&quot;ko-treeview-item-tmpl&quot;&gt;&lt;div data-bind=&quot;visible:$data[$root.label].indexOf($root.search()) &gt; -1&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;ko-treeview-cb&quot; data-bind=&quot;checked: $root.selected, attr:{value:$data[$root.label], id:$data[$root.label]}&quot;  /&gt;&lt;label  class=&quot;ko-treeview-label&quot; data-bind=&quot;text:$data[$root.label], attr:{for:$data[$root.label]}&quot;&gt;&lt;/label&gt;&lt;/div&gt;&lt;/script&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//append templates</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ko-treeview-root-tmpl&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertAdjacentHTML</span><span class="p">(</span><span class="s1">&#39;beforeend&#39;</span><span class="p">,</span> <span class="nx">rootTmpl</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ko-treeview-node-tmpl&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertAdjacentHTML</span><span class="p">(</span><span class="s1">&#39;beforeend&#39;</span><span class="p">,</span> <span class="nx">nodeTmpl</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ko-treeview-item-tmpl&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertAdjacentHTML</span><span class="p">(</span><span class="s1">&#39;beforeend&#39;</span><span class="p">,</span> <span class="nx">itemTmpl</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">//apply first binding</span>
</span><span class='line'>       <span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindingsToNode</span><span class="p">(</span><span class="nx">rootElement</span><span class="p">,{</span><span class="nx">template</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;ko-treeview-root-tmpl&quot;</span><span class="p">}},</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>        <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">valueAccessor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//style element</span>
</span><span class='line'>          <span class="nx">element</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">&quot;ko-treeview-container&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">valueAccessor</span><span class="p">();</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">data</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;ko.bindingHandlers.treeView: No data to display&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//extend options with search</span>
</span><span class='line'>          <span class="nx">options</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observable</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//set default data values</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">label</span><span class="p">)</span> <span class="nx">options</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">childNode</span><span class="p">)</span> <span class="nx">options</span><span class="p">.</span><span class="nx">childNode</span> <span class="o">=</span> <span class="s1">&#39;children&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//create the tree</span>
</span><span class='line'>         <span class="nx">ko</span><span class="p">.</span><span class="nx">bindingHandlers</span><span class="p">.</span><span class="nx">treeView</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>         <span class="nx">valueAccessor</span><span class="p">().</span><span class="nx">data</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">ko</span><span class="p">.</span><span class="nx">bindingHandlers</span><span class="p">.</span><span class="nx">treeView</span><span class="p">.</span><span class="nx">createNodes</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//let this handler control its descendants. </span>
</span><span class='line'>          <span class="k">return</span> <span class="p">{</span> <span class="nx">controlsDescendantBindings</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we made this bindingHandler reusable, it can be bound to a container element, passed the appropriate data, and it will do the rest (except styling, but that can be addressed in a few different ways). You would use this handler like-</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">data-bind=</span><span class="s">&quot;treeView:{selected:selectedNodes, data:data}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">vm</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">selectedNodes</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">([]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">observableArray</span><span class="p">([</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>     <span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">children</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 1-1&quot;</span><span class="p">,</span><span class="nx">children</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 1-1-1&quot;</span><span class="p">,</span><span class="nx">children</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 1-1-1-1&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="p">]}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 1-2&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>     <span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 2&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">children</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 2-1&quot;</span><span class="p">,</span><span class="nx">children</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 2-1-1&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;Level 2-2&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myVM</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">vm</span><span class="p">();</span>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="nx">myVM</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a working <a href="http://jsbin.com/Awipoku/14/edit">JSBin</a> of the finished result. What makes this pattern so nice, is it not only removes the handler behavior from the VM, but also the handlers views and templates from the VM. This results in a nicely modular UI component.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comeback]]></title>
    <link href="http://charlesbking.com/blog/2013/12/15/comeback/"/>
    <updated>2013-12-15T23:25:17-07:00</updated>
    <id>http://charlesbking.com/blog/2013/12/15/comeback</id>
    <content type="html"><![CDATA[<p>Wow, haven&rsquo;t posted on here in over a year. Well a lot has happened since then, so I thought I would update this post
to reflect some of the changes that I have been through. First off, I changed the stylesheets around significantly, to match the
style I am leaning towards now. Minimal, light and dark, only color where appropriate, etc. I am not done yet, so look
out for more changes. Professionally,  I jumped from doing app development on the side to full-time web-developer. Yayy!
It has been a tough year of fast paced development, but I think I am a better coder for it. So keeping that in mind,
some of my new post ideas will involve the things I am excited about now. Mainly <a href="http://www.knockoutjs.com">KnockoutJS</a>,
<a href="http://angularjs.org/">AngularJS</a>, NodeJS, and CoffeeScript (to name a few). I have some cool stuff to share so I hope you
enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackathon: What Not to Do]]></title>
    <link href="http://charlesbking.com/blog/2012/08/13/hackathon-what-not-to-do/"/>
    <updated>2012-08-13T05:57:00-07:00</updated>
    <id>http://charlesbking.com/blog/2012/08/13/hackathon-what-not-to-do</id>
    <content type="html"><![CDATA[<p>So over this past weekend I participated in my first and I believe Tucson&rsquo;s first <a href="http://startuptucson.com/hackathon">hackathon</a>. Overall, it was an awesome
experience and I met some really cool and interesting people. I saw some cool hacks/apps created in a short amount of time. Tucson desperately needs this kind of curation of
tech and tech culture. To be honest, I had no idea that so many like-minded people called Tucson home.</p>

<p>However, in contrast to the awesomeness of the event, I can say with complete honesty, I failed at the hackathon. I failed hard. This is partly the reason I am writing this, so I can look back
and remind myself what not to do in the future.</p>

<p><img class="center" src="http://i.imgur.com/bO1eb.jpg" width="480" height="320"></p>

<!-- more -->


<h2>FAIL</h2>

<p>I went into the hackathon with a few ideas that played to my strengths as a developer. However, when I quickly could not get anyone excited about my ideas, abandoned them
and joined with another team to work on something different. Not that this is inherently bad, but I needed to take a step back and ask myself first if I thought I could
execute anything with this idea in a 24 hour time-span. So this is lesson one for future me-</p>

<blockquote><p>Be completely honest with yourself about your ability to deliver something in 24 hours</p></blockquote>


<p>Learning new things is great. Learning new things while trying to compete in a time-based competition? Not so great. I tried to tackle a new physics engine
in which I had no prior experience. I told myself I could do it, however I don&rsquo;t think I was being very realistic with myself about my abilities.</p>

<p>So what happens if you cannot partner with a team or idea that plays to your strengths? In retrospect the only thing to do in that situation is to pivot. Brainstorm about your MVP (Minimum Viable Product)
for the competition and set some hourly goals.</p>

<blockquote><p>If you or your team members cannot meet these hourly goals, then pivot the goal, or the whole idea until you can</p></blockquote>


<p>I got stuck up on one problem, and spent most of the 24 hours trying to solve it. In that time I could have made numerous additions to other portions of the
idea, or pivoted the idea completely, and made more progress. 24 hours goes faster than you think, too many hold ups and you&rsquo;re done. From another perspective,
 24 hours can be a lot of time with enough people on the team.</p>

<p> <blockquote><p>Ensure everyone on the team has something to do that contributes to the final product. Play to their individual strengths if you can</p></blockquote></p>

<p> This feeds back into checkpoints into the goals you set before you started coding. If you have team members sitting idle, then get them working on some other aspects of
 the idea. Every product or idea can have multiple platforms targeted or other resources created. Have them make a website, a storyboard or a slide deck.
 Anything will help the polish and &ldquo;execution&rdquo; of the final product.</p>

<p> The last of my numerous failures was I forgot to enjoy myself. Don&rsquo;t get me wrong I love coding, but I treated it like I treat a day at work, head in the computer working away. I feel regretful about this,
 as this was a gathering of great people that I should have spent more time getting to know. So had I managed my team and time better, I could have enjoyed the
 atmosphere a little more. So &ndash;</p>

<p> <blockquote><p>Have fun! Use this advice to manage your team and time. Get up take a break and chat with some of the most interesting people in town</p></blockquote></p>

<h2>Not FAIL</h2>

<p> The one thing that I think we did right for hackathon 2012 was partner with a designer. The Tucson hackathon was not about creating a certain kind of hack or
 project but more a loosely themed free-for-all. With this kind of environment a designer can really help a fledging idea stand out in the final presentation.
 So here is a shoutout to <a href="http://tkstrategies.com">Theo Klipnis</a> for helping bring some credibility to a poorly executed project.</p>

<p> So if you&rsquo;re interested here is a video to what we were able to accomplish in 24 hours. The game and character are named Spleegle. The idea was a grappling based
vertical platformer with a chameleon that can only use his tongue to get away from some rising threat. I think the game is an interesting idea and I will continue
to work on it to see if it can turn into something good. What this video does not show is all of Theo&rsquo;s awesome drawings he did of Spleegle in different positions.</p>

<iframe width="100%" height="390" src="http://www.youtube.com/embed/TjyQLXzwrHI " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h2>Your mileage may vary</h2>

<p>I think a key point I should make is that I think these points are things that will work for me in future events. Your mileage may vary, and you or your
team might work very differently than this and still accomplish your goals. But if you&rsquo;re not having fun while doing it, you&rsquo;re doing it wrong. Can&rsquo;t wait for the next
hackathon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paginated View on WP7]]></title>
    <link href="http://charlesbking.com/blog/2012/07/23/paginated-view-on-wp7/"/>
    <updated>2012-07-23T07:41:00-07:00</updated>
    <id>http://charlesbking.com/blog/2012/07/23/paginated-view-on-wp7</id>
    <content type="html"><![CDATA[<p>What I wanted to detail in these upcoming posts was how I implemented a paginated view for the &ldquo;card deck&rdquo; on each platform. To sum it up, Android and iOS
provided better better controls out of the box to implement this functionality. Windows Phone 7 was kind of a pain so we will start with that first. So what was the end goal? The
end goal was a fluid image-gallery type experience that allowed users to swipe through the cards with touch rather than buttons. This
type of functionality is extremely common on mobile apps so I imagined there would be built in controls in the frameworks. Well I was half right..</p>

<!-- more -->


<h2>WP7 Pivot</h2>

<p>Windows Phone 7 has no obvious choice for this control, however with some template modification, I ended up using the <a href="http://msdn.microsoft.com/en-us/library/microsoft.phone.controls.pivot(v=vs.92.aspx">Pivot</a>.
The pivot control is a common element in metro style apps. The great thing about the pivot control is it inherits from ItemsControl,
which gave me all the properties and events that I need to get the functionality, most importantly the SelectedItem property and LoadedPivotItem and UnloadedPivotItem events.</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;phone:PhoneApplicationPage.Resources&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Style</span> <span class="na">x:Key=</span><span class="s">&quot;PivotItemStyle1&quot;</span> <span class="na">TargetType=</span><span class="s">&quot;controls:PivotItem&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&quot;Template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Setter.Value&gt;</span>
</span><span class='line'>              <span class="nt">&lt;ControlTemplate</span> <span class="na">TargetType=</span><span class="s">&quot;controls:PivotItem&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;Grid&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&quot;Auto&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&quot;*&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;Grid.RowDefinitions/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;Image</span> <span class="na">Source=</span><span class="s">&quot;{Binding ImageUri}&quot;</span> <span class="na">Stretch=</span><span class="s">&quot;Uniform&quot;</span> <span class="na">Height=</span><span class="s">&quot;630&quot;</span> <span class="na">Grid.Row=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">{&quot;Binding</span> <span class="err">Name}&quot;</span> <span class="na">FontFamily=</span><span class="s">&quot;Segoe WP Semibold&quot;</span> <span class="na">Grid.Row=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/Grid&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/ControlTemplate&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Setter.Value&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Setter&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Style&gt;</span>
</span><span class='line'><span class="nt">&lt;/phone:PhoneApplicationPage.Resources&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;controls:Pivot</span> <span class="na">ItemsSource=</span><span class="s">{&quot;Binding</span> <span class="err">CardList&quot;}</span> <span class="na">LoadedPivotItem=</span><span class="s">&quot;MainPivotLoadedPivotItem&quot;</span> <span class="na">UnloadedPivotItem=</span><span class="s">&quot;MainPivotUnloadedPivotItem&quot;</span>  <span class="na">ItemContainerStyle=</span><span class="s">{&quot;StaticResource</span> <span class="err">PivotItemStyle1}&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the layout code is fairly simple, a pivot control whose ItemsSource is databound to your viewmodel, and implements a custom style to get the layout the way you want it and binds the items to the viewmodel.
So in your code you can subscribe to the LoadedPivotItem and UnloadedPivotItem events to access your Items every time the user changes the cards</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="nf">CardPage</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//apply datacontext to the page to bind to my viewmodel.</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="n">DataContext</span> <span class="p">=</span> <span class="n">App</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">MainPivotLoadedItem</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">PivotItemEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>  
</span><span class='line'>  <span class="c1">//get reference to control</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">pivot</span> <span class="p">=</span> <span class="n">sender</span> <span class="k">as</span> <span class="n">Pivot</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">pivot</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//get reference to SelectedItem as cast as my bound object</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">card</span> <span class="p">=</span> <span class="n">pivot</span><span class="p">.</span><span class="n">SelectedItem</span> <span class="k">as</span> <span class="n">CardModel</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//do some stuff if required. In my case, play a sound effect and narration file</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">card</span> <span class="p">!=</span><span class="k">null</span><span class="p">)</span> <span class="n">card</span><span class="p">.</span><span class="n">PlaySound</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">MainPivotUnLoadedItem</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">PivotItemEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//get reference to control</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">pivot</span> <span class="p">=</span> <span class="n">sender</span> <span class="k">as</span> <span class="n">Pivot</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">pivot</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//get reference to SelectedItem as cast as my bound object</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">card</span> <span class="p">=</span> <span class="n">pivot</span><span class="p">.</span><span class="n">SelectedItem</span> <span class="k">as</span> <span class="n">CardModel</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//do some stuff if required. In my case, stop any playing sound as card is was unloaded</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">card</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">card</span><span class="p">.</span><span class="n">KillSounds</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pivot problems</h3>

<p>In the end this solution is nice for its simplicity. First, the pivot control doesn&rsquo;t provide the experience you would expect from
this type of application. Each item that is not in view is hidden, so without a header each item just kind of appears and animates into view. Secondly, the first problem
is exaggerated since the Pivot control does not support dragging, which I found out is highly annoying to some users. See the video below for an example of
what I am talking about.</p>

<iframe width="100%" height="390" src="http://www.youtube.com/embed/nFPv0JQqKkk " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h3>Panorama</h3>

<p>So after some a few hours of racking my brain trying to create my own control by sub-classing ListBox, or adding to ScrollViewer with a
StackPanel, I realized that another Microsoft.Phone.Controls class did exactly what I needed; the Panorama. Again, the Panorama required some templating
to get the look layout I was after.</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>
</span><span class='line'><span class="nt">&lt;phone:PhoneApplicationPage.Resources&gt;</span>
</span><span class='line'>   <span class="nt">&lt;Style</span> <span class="na">x:Key=</span><span class="s">&quot;PanoramaStyle1&quot;</span> <span class="na">TargetType=</span><span class="s">&quot;controls:Panorama&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&quot;ItemsPanel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Setter.Value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ItemsPanelTemplate&gt;</span>
</span><span class='line'>              <span class="nt">&lt;controlsPrimitives:PanoramaPanel</span> <span class="na">x:Name=</span><span class="s">&quot;panel&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;/ItemsPanelTemplate&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Setter.Value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Setter&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&quot;Foreground&quot;</span> <span class="na">Value=</span><span class="s">&quot;{StaticResource PhoneForegroundBrush}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&quot;Background&quot;</span> <span class="na">Value=</span><span class="s">&quot;Transparent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&quot;Template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Setter.Value&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ControlTemplate</span> <span class="na">TargetType=</span><span class="s">&quot;controls:Panorama&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;Grid&gt;</span>
</span><span class='line'>                <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&quot;1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&quot;*&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/Grid.RowDefinitions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;controlsPrimitives:PanningBackgroundLayer</span> <span class="na">x:Name=</span><span class="s">&quot;BackgroundLayer&quot;</span>
</span><span class='line'>                                                           <span class="na">HorizontalAlignment=</span><span class="s">&quot;Left&quot;</span> <span class="na">Grid.RowSpan=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;Border</span> <span class="na">x:Name=</span><span class="s">&quot;background&quot;</span> <span class="na">Background=</span><span class="s">&quot;{TemplateBinding Background}&quot;</span>
</span><span class='line'>                          <span class="na">CacheMode=</span><span class="s">&quot;BitmapCache&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/controlsPrimitives:PanningBackgroundLayer&gt;</span>
</span><span class='line'>                <span class="nt">&lt;controlsPrimitives:PanningTitleLayer</span> <span class="na">x:Name=</span><span class="s">&quot;TitleLayer&quot;</span> <span class="na">CacheMode=</span><span class="s">&quot;BitmapCache&quot;</span>
</span><span class='line'>                                                      <span class="na">ContentTemplate=</span><span class="s">&quot;{TemplateBinding TitleTemplate}&quot;</span> <span class="na">Content=</span><span class="s">&quot;{TemplateBinding Title}&quot;</span> <span class="na">FontSize=</span><span class="s">&quot;187&quot;</span>
</span><span class='line'>                                                      <span class="na">FontFamily=</span><span class="s">&quot;{StaticResource PhoneFontFamilyLight}&quot;</span> <span class="na">HorizontalAlignment=</span><span class="s">&quot;Left&quot;</span> <span class="na">Margin=</span><span class="s">&quot;0,0,0,0&quot;</span> <span class="na">Grid.Row=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;controlsPrimitives:PanningLayer</span> <span class="na">x:Name=</span><span class="s">&quot;ItemsLayer&quot;</span> <span class="na">HorizontalAlignment=</span><span class="s">&quot;Left&quot;</span>
</span><span class='line'>                                                 <span class="na">Grid.Row=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="nt">&lt;ItemsPresenter</span> <span class="na">x:Name=</span><span class="s">&quot;items&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/controlsPrimitives:PanningLayer&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>              <span class="nt">&lt;/Grid&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ControlTemplate&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/Setter.Value&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Setter&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Style&gt;</span>
</span><span class='line'>      <span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;loadedItemsTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;StackPanel</span> <span class="na">Margin=</span><span class="s">&quot;0,-30,0,0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Image</span> <span class="na">Width=</span><span class="s">&quot;800&quot;</span> <span class="na">Height=</span><span class="s">&quot;340&quot;</span> <span class="na">Source=</span><span class="s">&quot;{Binding ImageSource}&quot;</span> <span class="na">Stretch=</span><span class="s">&quot;Uniform&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;StackPanel</span> <span class="na">HorizontalAlignment=</span><span class="s">&quot;Center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;TextBlock</span> <span class="na">TextWrapping=</span><span class="s">&quot;Wrap&quot;</span> <span class="na">Text=</span><span class="s">&quot;{Binding Name}&quot;</span> <span class="na">Foreground=</span><span class="s">&quot;#FF726A6A&quot;</span>
</span><span class='line'>                       <span class="na">FontFamily=</span><span class="s">&quot;../Fonts/Albertsthal_Typewriter.ttf#Albertsthal Typewriter&quot;</span> <span class="na">FontSize=</span><span class="s">&quot;35&quot;</span> <span class="na">FontWeight=</span><span class="s">&quot;Bold&quot;</span>
</span><span class='line'>                       <span class="na">d:LayoutOverrides=</span><span class="s">&quot;Width&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;TextBlock</span> <span class="na">TextWrapping=</span><span class="s">&quot;Wrap&quot;</span> <span class="na">Text=</span><span class="s">&quot;{Binding Phoenetic}&quot;</span> <span class="na">Foreground=</span><span class="s">&quot;#FF726A6A&quot;</span>
</span><span class='line'>                       <span class="na">FontFamily=</span><span class="s">&quot;Courier New&quot;</span> <span class="na">FontStyle=</span><span class="s">&quot;Italic&quot;</span> <span class="na">FontSize=</span><span class="s">&quot;18.667&quot;</span> <span class="na">FontWeight=</span><span class="s">&quot;Bold&quot;</span> <span class="na">d:LayoutOverrides=</span><span class="s">&quot;Width&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/StackPanel&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/StackPanel&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/DataTemplate&gt;</span>
</span><span class='line'> <span class="nt">&lt;/phone:PhoneApplicationPage.Resources&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="nt">&lt;Grid</span> <span class="na">x:Name=</span><span class="s">&quot;LayoutRoot&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;controls:Panorama</span> <span class="na">x:Name=</span><span class="s">&quot;MainPanorama&quot;</span> <span class="na">ItemsSource=</span><span class="s">&quot;{Binding Dinosaurs}&quot;</span> <span class="na">ItemTemplate=</span><span class="s">&quot;{StaticResource loadItemsTemplate}&quot;</span> <span class="na">Style=</span><span class="s">&quot;{PanoramaStyle1}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;/Grid&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>So with this template, I changed the style of the panorama to minimize the massive header section to make it look more like a card. For the panorama,
everything is loaded at runtime, so there are no LoadedItem or UnloadedItem events to subscribe to. This makes getting the currently selected item
a little different than the Pivot control. The relevant event to handle for the Panorama is the SelectionChanged event. You can utilize it in your
code-behind, or preferably your <a href="http://www.codeproject.com/Articles/160892/Binding-Events-to-Methods-in-the-Silverlight-MVVM">viewmodel</a>.</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="nf">MainPage</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//apply datacontext to the page to bind to my viewmodel.</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="n">DataContext</span> <span class="p">=</span> <span class="n">App</span><span class="p">.</span><span class="n">ViewModel</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//subscribe to the selection changed event</span>
</span><span class='line'>  <span class="n">MainPanorama</span><span class="p">.</span><span class="n">SelectionChanged</span> <span class="p">+=</span> <span class="k">new</span> <span class="n">EventHandler</span><span class="p">(</span><span class="n">ListSelectionChanged</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">ListSelectionChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">SelectionChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Card</span> <span class="n">newItem</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Card</span> <span class="n">oldItem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//get the currently selected panorama item </span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">AddedItems</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>       <span class="n">currentItem</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">AddedItems</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="k">as</span> <span class="n">Card</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//get previous item that was unselected </span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">RemovedItems</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>       <span class="n">oldItem</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">RemovedItems</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="k">as</span> <span class="n">Card</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//do some on change some stuff. In my case, play some sounds.</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">oldItem</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">oldItem</span><span class="p">.</span><span class="n">KillSounds</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">newItem</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">newItem</span><span class="p">.</span><span class="n">PlaySounds</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So anyways that is pretty straightforward and is a much nicer experience for the user. I have seen many blog posts detailing the use of the Pivot control for
an items reel of sorts. IMHO, the panorama is nicer. See the difference in the video below&hellip;</p>

<iframe width="100%" height="390" src="http://www.youtube.com/embed/TE_z7BUQrYQ " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<h3>Lazy loading</h3>

<p>So the downside to the panorama control is that it utilizes a non-virtualized panel for its ItemsControl.  What does this mean for us? It means that every Image in the view
is going to load and display on startup. That absolutely kills your memory. Microsoft recommends that you keep your peak memory usage below 90MB, I could easily surpass that with
around 30 images loading in the panorama without lazy-loading. So to get acceptable performance I <em>had</em> to implement some lazy-loading technique for the images in bound collection.
To implement this, I started with my datamodel.</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">  </span>
</span><span class='line'><span class="na"> [DataContractAttribute]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Card</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>          <span class="c1">//this is the relative path to the card image. </span>
</span><span class='line'><span class="na">         [DataMember]</span>
</span><span class='line'>          <span class="k">public</span> <span class="kt">string</span> <span class="n">ImageUri</span> <span class="p">{</span><span class="k">get</span><span class="p">;</span><span class="k">set</span><span class="p">;}</span>
</span><span class='line'><span class="na">         </span>
</span><span class='line'><span class="na">         [DataMember]</span>
</span><span class='line'>          <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span><span class="k">get</span><span class="p">;</span><span class="k">set</span><span class="p">;}</span>
</span><span class='line'><span class="na">         </span>
</span><span class='line'><span class="na">         [DataMember]</span>
</span><span class='line'>          <span class="k">public</span> <span class="kt">string</span> <span class="n">Phoenetic</span> <span class="p">{</span><span class="k">get</span><span class="p">;</span><span class="k">set</span><span class="p">;}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//this is the ImageSource class that I will bind to in my view.</span>
</span><span class='line'>          <span class="k">private</span> <span class="n">ImageSource</span> <span class="n">_imgSource</span><span class="p">;</span>
</span><span class='line'><span class="na">         [IgnoreDataMember]</span>
</span><span class='line'>          <span class="k">public</span> <span class="n">ImageSource</span> <span class="n">ImageSource</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">get</span><span class="p">{</span><span class="k">return</span> <span class="n">_imgSource</span><span class="p">;}</span>
</span><span class='line'>              <span class="k">set</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="n">_imgSource</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="p">!</span><span class="n">_imgSource</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="k">value</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">_imgSource</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">OnPropertyChanged</span><span class="p">(</span><span class="s">&quot;ImageSource&quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">public</span> <span class="k">event</span> <span class="n">PropertChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>
</span><span class='line'>          <span class="k">protected</span> <span class="k">void</span> <span class="nf">OnPropertyChanged</span><span class="p">(</span><span class="kt">string</span> <span class="n">propertyName</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">PropertyChanged</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">PropertyChanged</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">propertyName</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now I have this nice data model that holds both the ImageURI and an ImageSource property that I can bind to. Let&rsquo;s look at the data template for the Panorama one more time-</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;loadedItemsTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;StackPanel</span> <span class="na">Margin=</span><span class="s">&quot;0,-30,0,0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;Image</span> <span class="na">Width=</span><span class="s">&quot;800&quot;</span> <span class="na">Height=</span><span class="s">&quot;340&quot;</span> <span class="na">Source=</span><span class="s">&quot;{Binding ImageSource}&quot;</span> <span class="na">Stretch=</span><span class="s">&quot;Uniform&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;StackPanel</span> <span class="na">HorizontalAlignment=</span><span class="s">&quot;Center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;TextBlock</span> <span class="na">TextWrapping=</span><span class="s">&quot;Wrap&quot;</span> <span class="na">Text=</span><span class="s">&quot;{Binding Name}&quot;</span> <span class="na">Foreground=</span><span class="s">&quot;#FF726A6A&quot;</span>
</span><span class='line'>                       <span class="na">FontFamily=</span><span class="s">&quot;../Fonts/Albertsthal_Typewriter.ttf#Albertsthal Typewriter&quot;</span> <span class="na">FontSize=</span><span class="s">&quot;35&quot;</span> <span class="na">FontWeight=</span><span class="s">&quot;Bold&quot;</span>
</span><span class='line'>                       <span class="na">d:LayoutOverrides=</span><span class="s">&quot;Width&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;TextBlock</span> <span class="na">TextWrapping=</span><span class="s">&quot;Wrap&quot;</span> <span class="na">Text=</span><span class="s">&quot;{Binding Phoenetic}&quot;</span> <span class="na">Foreground=</span><span class="s">&quot;#FF726A6A&quot;</span>
</span><span class='line'>                       <span class="na">FontFamily=</span><span class="s">&quot;Courier New&quot;</span> <span class="na">FontStyle=</span><span class="s">&quot;Italic&quot;</span> <span class="na">FontSize=</span><span class="s">&quot;18.667&quot;</span> <span class="na">FontWeight=</span><span class="s">&quot;Bold&quot;</span> <span class="na">d:LayoutOverrides=</span><span class="s">&quot;Width&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/StackPanel&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/StackPanel&gt;</span>
</span><span class='line'> <span class="nt">&lt;/DataTemplate&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Now here lets take a look at my Viewmodel. If you remember from earlier, the important event handler for the Panorama control for my use was the SelectionChanged event.
On the SelectionChanged event, I get the index of the currently selected item, and essentially start a background worker to assign the ImageSource
property from the ImageUri property for the next two images. At the same time, I null the references to ImageSource for the previous two images. This allows the GC to free up their memory on the
next cycle.</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ListSelectionChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">SelectionChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// get current selected card</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">currentItem</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">AddedItems</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="k">as</span> <span class="n">Card</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// add two more card in worker thread </span>
</span><span class='line'>            <span class="n">LoadImageViewCardsAsync</span><span class="p">(</span><span class="n">currentItem</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>        <span class="c1">/// Loads the next two card images in the deck and unloads the previous two</span>
</span><span class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">LoadImageViewCardsAsync</span><span class="p">(</span><span class="n">Card</span> <span class="n">currentCard</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">bgWorker</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BackgroundWorker</span><span class="p">();</span>
</span><span class='line'>            <span class="n">bgWorker</span><span class="p">.</span><span class="n">DoWork</span> <span class="p">+=</span> <span class="n">BgWorkerDoWork</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">index</span> <span class="p">=</span> <span class="n">Dinosaurs</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">currentCard</span><span class="p">);</span>
</span><span class='line'>            <span class="n">bgWorker</span><span class="p">.</span><span class="n">RunWorkerAsync</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>        <span class="k">private</span> <span class="k">void</span> <span class="nf">BgWorkerDoWork</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">DoWorkEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">index</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">e</span><span class="p">.</span><span class="n">Argument</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="p">(</span><span class="n">index</span> <span class="p">+</span> <span class="m">2</span><span class="p">);</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">&gt;</span> <span class="n">Dinosaurs</span><span class="p">.</span><span class="n">Count</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">i1</span> <span class="p">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>                <span class="n">_dispatcher</span><span class="p">.</span><span class="n">BeginInvoke</span><span class="p">(</span><span class="k">delegate</span>
</span><span class='line'>                                            <span class="p">{</span>
</span><span class='line'>                                                <span class="kt">var</span> <span class="n">bmp</span> <span class="p">=</span>
</span><span class='line'>                                                    <span class="k">new</span> <span class="nf">BitmapImage</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">Dinosaurs</span><span class="p">[</span><span class="n">i1</span><span class="p">].</span><span class="n">ImageUri</span><span class="p">,</span> <span class="n">UriKind</span><span class="p">.</span><span class="n">Relative</span><span class="p">));</span>
</span><span class='line'>                                                <span class="n">Dinosaurs</span><span class="p">[</span><span class="n">i1</span><span class="p">].</span><span class="n">ImageSource</span> <span class="p">=</span> <span class="n">bmp</span><span class="p">;</span>
</span><span class='line'>                                            <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//remove old images from UI by nulling the reference</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="n">index</span> <span class="p">-</span> <span class="m">2</span><span class="p">;</span> <span class="n">i</span> <span class="p">&gt;=</span> <span class="p">(</span><span class="n">index</span> <span class="p">-</span> <span class="m">3</span><span class="p">);</span> <span class="n">i</span><span class="p">--)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">i1</span> <span class="p">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>                <span class="n">_dispatcher</span><span class="p">.</span><span class="n">BeginInvoke</span><span class="p">(</span><span class="k">delegate</span> <span class="p">{</span> <span class="n">Dinosaurs</span><span class="p">[</span><span class="n">i1</span><span class="p">].</span><span class="n">ImageSource</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what was the result of this? For about 57 cards being loaded at a time, I was able to reduce my memory usage from 100MB to ~50MB while
viewing a flash card deck. If you run the Memory Analyzer you will see that it is the image loads on the UI that kill the memory, so this method
removes that barrier. To go even further, you could implement a buffer collection that is bound to the Panorama and dynamically load and unload full
items, however without the image my objects are very small so that was overkill for me.</p>

<h3>Drawbacks</h3>

<p> The main drawback with using a panorama control is the initial load time for a page utilizing a panorama. Check out this telerik <a href="http://blogs.telerik.com/blogs/posts/10-11-01/windows-phone-7-performance---emulator-vs-physical-device.aspx">post</a> about
 the subject. This drawback was acceptable for me for the vastly better user experience vs. a pivot control.</p>

<h3>FlipView to the rescue</h3>

<p> I wanted to add this in- Windows 8 fixes this problem and introduces a control called <a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh850405.aspx">FlipView</a>. Awesome control that can be virtualized and databound with built-in touch and button navigation.</p>

<p> Next post I will talk about my Android implementation!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Adventure Into iOS]]></title>
    <link href="http://charlesbking.com/blog/2012/06/06/my-first-adventure-into-ios/"/>
    <updated>2012-06-06T18:28:00-07:00</updated>
    <id>http://charlesbking.com/blog/2012/06/06/my-first-adventure-into-ios</id>
    <content type="html"><![CDATA[<p>Today I started my porting the simplest app in my catalog over to iOS. The app is <a href="http://www.windowsphone.com/en-us/apps/b474228c-e9d1-4fed-be5a-34025e52162b">Critter Cards- Toddler</a>.
Admittedly, it is not a complex app, just flash cards with the ability to overwrite the built in narration with your own. So I need
a control for displaying a launcher of sorts to choose your deck, a control to navigate between cards and some pages to set settings.</p>

<p>As of today I have completed the initial design of the front page of launcher icons for navigating around the app. So how did the process compare from
WP7 &ndash;> Android &ndash;> iOS? Let&rsquo;s take a look.</p>

<p>This is the look I wanted to achieve on each platform-</p>

<p><img class="center" src="http://catalog.zune.net/v3.2/en-US/image/ee84b835-5258-4981-aad7-eda1bb46a049?width=1280&height=720&resize=true" width="240" height="400"></p>

<h2>WP7</h2>

<p>Since this was the first platform I started on, I decided the launcher should be &ldquo;metro&rdquo; grid of tiles to choose your card deck.
This is where the power of <a href="http://msdn.microsoft.com/en-us/library/system.windows.uielement%28v=vs.95%29.aspx">UIElements</a> and <a href="http://msdn.microsoft.com/en-us/library/ms742521.aspx">DataTemplates</a> in SilverLight and WPF comes in handy,
and made this task really simple. See below for an example-</p>

<!-- more -->




<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;tileItemsTemplate1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ListBoxItem</span> <span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;toolkit:ContextMenuService.ContextMenu</span> <span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;toolkit:ContextMenu</span> <span class="na">Opened=</span><span class="s">&quot;ContextMenuOpened&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;toolkit:MenuItem</span> <span class="na">Header=</span><span class="s">&quot;Delete Card Set&quot;</span> <span class="na">Click=</span><span class="s">&quot;DeleteCardSetClick&quot;</span><span class="nt">&gt;&lt;/toolkit:MenuItem&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;toolkit:MenuItem</span> <span class="na">Header=</span><span class="s">&quot;Add Custom Card Set&quot;</span> <span class="na">Click=</span><span class="s">&quot;AddNewClick&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;toolkit:MenuItem</span> <span class="na">Header=</span><span class="s">&quot;Edit Set&quot;</span> <span class="na">Click=</span><span class="s">&quot;EditSetClick&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/toolkit:ContextMenu&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/toolkit:ContextMenuService.ContextMenu&gt;</span>
</span><span class='line'>                <span class="nt">&lt;Button</span> <span class="na">x:Name=</span><span class="s">&quot;button&quot;</span> <span class="na">Click=</span><span class="s">&quot;TileClick1&quot;</span> <span class="na">Style=</span><span class="s">&quot;{StaticResource ButtonStyle2}&quot;</span> <span class="na">BorderBrush=</span><span class="s">&quot;{x:Null}&quot;</span> <span class="na">toolkit:TiltEffect.IsTiltEnabled=</span><span class="s">&quot;True&quot;</span> <span class="na">Padding=</span><span class="s">&quot;-13&quot;</span> <span class="na">Foreground=</span><span class="s">&quot;Transparent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                    <span class="nt">&lt;Grid</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                        <span class="nt">&lt;Rectangle</span> <span class="na">Height=</span><span class="s">&quot;234&quot;</span> <span class="na">Width=</span><span class="s">&quot;227&quot;</span> <span class="na">CacheMode=</span><span class="s">&quot;BitmapCache&quot;</span> <span class="na">Fill=</span><span class="s">&quot;{Binding TileColor,Converter={StaticResource ColorToBrushConverter}}&quot;</span>  <span class="na">Margin=</span><span class="s">&quot;0,1,-5,0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Image</span> <span class="na">Source=</span><span class="s">&quot;{Binding ImageUri}&quot;</span>  <span class="na">Stretch=</span><span class="s">&quot;None&quot;</span> <span class="na">CacheMode=</span><span class="s">&quot;BitmapCache&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">&quot;{Binding Name}&quot;</span> <span class="na">FontSize=</span><span class="s">&quot;26&quot;</span> <span class="na">TextAlignment=</span><span class="s">&quot;Center&quot;</span> <span class="na">FontWeight=</span><span class="s">&quot;Bold&quot;</span> <span class="na">Foreground=</span><span class="s">&quot;White&quot;</span> <span class="na">FontFamily=</span><span class="s">&quot;Segoe WP Semibold&quot;</span> <span class="na">Height=</span><span class="s">&quot;35&quot;</span> <span class="na">Margin=</span><span class="s">&quot;0,200,-2,0&quot;</span> <span class="na">Width=</span><span class="s">&quot;224&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nt">&lt;/Grid&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;/Button&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ListBoxItem&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;Listbox</span> <span class="na">ItemsSource=</span><span class="s">&quot;{Binding Tiles}&quot;</span> <span class="na">ItemTemplate=</span><span class="s">&quot;{StaticResource tileItemsTemplate1}&quot;</span>  <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I set a custom DataTemplate for the items contained in the ListBox. In the DataTemplate I defined a simple Button to obtain
the ButtonBase events, such as Click. Then I set the button&rsquo;s <em>content</em> to be a Grid containing a colored rectangle, an image
and a textblock. If you were maintaining multiple screens you could also accomplish this by setting all this data in a <a href="http://msdn.microsoft.com/en-us/magazine/cc721611.aspx">custom style</a> for the button itself.
 When you get used to it, it is quite powerful and you can do some interesting things with overriding templates to create
custom UI elements. As you can see the ListBox ItemSource is data bound to a collection, and the ItemTemplate items are data bound as well.
This design allows for tiles to be added easily to the bound collection, requiring no changes to the UI template.
I will go into this in another post. Right now I just want to focus on the UI creation.</p>

<h2>Android</h2>

<p>Now with Android I decided to go with a static layout defined in the similar-to-XAML, xml graphical layout
in Android. Why static? Well there is <a href="http://www.stackoverflow.com/questions/6007941/android-data-binding-similar-to-wpf">no built in &ldquo;Databinding&rdquo;</a> in Android so I had a choice;
Statically create the layout in XML or create the layout in the code behind. I chose statically creating for the flexibility of
seeing the design take shape in the extremely helpful &ldquo;Graphical Layout&rdquo; tab in an Eclipse android project. With this view, you can target
the many different screen sizes in Android and see how your layout will look on those resolutions. Now, when I had my layout the way I wanted it,
I just hooked up an EventListener to the buttons and moved on. Not the most extensible solution as adding tiles would be a pain, but maybe when
I want to add a new cardset, I will go back and create the view in the code behind so it is more robust.  Here is an example of the layout-</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/mainLinear&quot;</span>
</span><span class='line'>    <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>           <span class="nt">&lt;ScrollView</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>        <span class="na">android:scrollbars=</span><span class="s">&quot;none&quot;</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/scrollViewMain&quot;</span>
</span><span class='line'>        <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>       <span class="nt">&lt;TableLayout</span>  <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span> <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span> <span class="na">android:id=</span><span class="s">&quot;@+id/maintable&quot;</span><span class="nt">&gt;</span>&quot;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TableRow</span> <span class="na">android:layout_width=</span><span class="s">&quot;fill_parent&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;ImageButton</span>
</span><span class='line'>                <span class="na">android:contentDescription=</span><span class="s">&quot;@string/desc&quot;</span>
</span><span class='line'>                <span class="na">android:id=</span><span class="s">&quot;@+id/btnDesert&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;180dp&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;180dp&quot;</span>
</span><span class='line'>                <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dp&quot;</span>
</span><span class='line'>                <span class="na">android:scaleType=</span><span class="s">&quot;fitCenter&quot;</span>
</span><span class='line'>                <span class="na">android:src=</span><span class="s">&quot;@drawable/desert&quot;</span>
</span><span class='line'>                <span class="na">android:onClick=</span><span class="s">&quot;ClickHandler&quot;</span>
</span><span class='line'>                <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;ImageButton</span>
</span><span class='line'>                <span class="na">android:contentDescription=</span><span class="s">&quot;@string/desc&quot;</span>
</span><span class='line'>                <span class="na">android:id=</span><span class="s">&quot;@+id/btnSavanna&quot;</span>
</span><span class='line'>                <span class="na">android:layout_width=</span><span class="s">&quot;180dp&quot;</span>
</span><span class='line'>                <span class="na">android:layout_height=</span><span class="s">&quot;180dp&quot;</span>
</span><span class='line'>                <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                <span class="na">android:padding=</span><span class="s">&quot;10dp&quot;</span>
</span><span class='line'>                <span class="na">android:scaleType=</span><span class="s">&quot;fitCenter&quot;</span>
</span><span class='line'>                <span class="na">android:src=</span><span class="s">&quot;@drawable/savanna&quot;</span>
</span><span class='line'>                <span class="na">android:onClick=</span><span class="s">&quot;ClickHandler&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/TableRow&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/TableLayout&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ScrollView&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code behind there is the requisite 10 item switch-case (ugh) that gets the ID of the sending ImageButton, and passes that context to the CritterCardsPage activity and opens the
CritterCardsPage activity.</p>

<figure class='code'><figcaption><span>[ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">ClickHandler</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">Intent</span> <span class="n">nav</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnDesert</span><span class="o">:</span>
</span><span class='line'>          
</span><span class='line'>              <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">CritterCardsPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>             <span class="n">nav</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">,</span> <span class="n">CardType</span><span class="o">.</span><span class="na">DESERT</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnSavanna</span><span class="o">:</span>
</span><span class='line'>           <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">CritterCardsPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>         <span class="n">nav</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">,</span> <span class="n">CardType</span><span class="o">.</span><span class="na">SAVANNA</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>          
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnArctic</span><span class="o">:</span>
</span><span class='line'>           <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">CritterCardsPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>         <span class="n">nav</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">,</span> <span class="n">CardType</span><span class="o">.</span><span class="na">ARCTIC</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnRainforest</span><span class="o">:</span>
</span><span class='line'>           <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">CritterCardsPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>         <span class="n">nav</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">,</span> <span class="n">CardType</span><span class="o">.</span><span class="na">RAINFOREST</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnForest</span><span class="o">:</span>
</span><span class='line'>           <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">CritterCardsPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>         <span class="n">nav</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">,</span> <span class="n">CardType</span><span class="o">.</span><span class="na">FOREST</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnUnderwater</span><span class="o">:</span>
</span><span class='line'>           <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">CritterCardsPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>         <span class="n">nav</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">,</span> <span class="n">CardType</span><span class="o">.</span><span class="na">UNDERWATER</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>  
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnRandom</span><span class="o">:</span>
</span><span class='line'>           <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">CritterCardsPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>         <span class="n">nav</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">,</span> <span class="n">CardType</span><span class="o">.</span><span class="na">RANDOM</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnSupport</span><span class="o">:</span>
</span><span class='line'>           <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">SupportPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btnSettings</span><span class="o">:</span>
</span><span class='line'>               <span class="n">nav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">CritterCardsAnimalsActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span><span class="n">SettingsPage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">nav</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>             <span class="n">startActivity</span><span class="o">(</span><span class="n">nav</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>So Android and WP7 should see nice and familiar to anyone who is comfortable with web development and CSS styling. All the same concepts are used,
fixed width elements, dynamic width elements, nesting elements etc. Powerful and straight forward (for me at least), however in this case
not optimal.</p>

<h2>iOS</h2>

<p>So moving to iOS represented in one way a step back in ease of use for creation of a UI. No more XML based UI design, no more similarities to
web development. You can either create the UI at runtime in your ViewController or create it in the Interface Builder with a WinForms like
drag and drop interface. For beginners to programming this style is welcome and presents a low entry barrier to designing a UI, however
for me it felt like a step back. I am new to iOS but not new to programming, so I was looking for the more powerful ways to create the interface, and
left wanting. So, to create my &ldquo;metro&rdquo; grid in iOS I had to resort to doing it in code with the ViewController. Not that this is bad by any means,
in fact IMHO it is more robust than my Android solution, however compared to Silverlight and WPF, the same effect in iOS results in a much larger chunk of code.
Now take this section as my first attempt, this is what I came up with after my first few hours of iOS programming. I could come across a better way
as I become more familiar. If that happens I will surely update here. This solution started with the example at <a href="http://www.conecode.com/news/2012/05/ios-how-to-create-a-grid-of-uibuttons/">Cone Code</a></p>

<p>So it starts with the ViewController.h and adding a multi-dimensional array to store the button locations</p>

<figure class='code'><figcaption><span>ViewController.h [ ]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define kButtonColumns 2</span>
</span><span class='line'><span class="cp">#define kButtonRows 5</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIButton</span> <span class="o">*</span><span class="n">buttons</span><span class="p">[</span><span class="n">kButtonColumns</span><span class="p">][</span><span class="n">kButtonRows</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next code to create the &ldquo;Tiles&rdquo; in the implementation.</p>

<figure class='code'><figcaption><span>ViewController.m [ ]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;QuartzCore/QuartzCore.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;Tile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">ViewController</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//get the device screen size and set the UIScrollView height to allow for 5 tiles that are one third the height of the screen. </span>
</span><span class='line'>    <span class="c1">//Thus allowing for 3 tiles on the screen and 2 off.</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">screenRect</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIScrollView</span> <span class="o">*</span><span class="n">tempScrollView</span><span class="o">=</span><span class="p">(</span><span class="n">UIScrollView</span> <span class="o">*</span><span class="p">)</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tempScrollView</span><span class="p">.</span><span class="n">contentSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">screenRect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="p">,</span> <span class="p">(</span><span class="n">screenRect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//call the placeTile method</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">placeTiles</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To store the data for the tiles I created a custom class called tile. Tile holds three properties,
an image, a title and a color. It also implements an initialization method (I miss object initializers in C#) to pass in
the values on init.</p>

<figure class='code'><figcaption><span>Tile.h [ ]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Tile</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">retain</span><span class="p">)</span> <span class="n">UIImage</span> <span class="o">*</span> <span class="n">tileImage</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">tileTitle</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">retain</span><span class="p">)</span> <span class="n">UIColor</span> <span class="o">*</span> <span class="n">tileColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithImage:</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span> <span class="nf">andTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">andColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">color</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the implementation</p>

<figure class='code'><figcaption><span>Tile.m [ ]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Tile.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Tile</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">tileColor</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">tileImage</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">tileTitle</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithImage:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span> <span class="nf">andTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span> <span class="nf">andColor:</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">color</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tileColor</span> <span class="o">=</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tileImage</span> <span class="o">=</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tileTitle</span> <span class="o">=</span> <span class="n">title</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now that I have my tile object, I created a method in the ViewController.m to initialize an
NSArray of tiles to use in the placeTiles method.</p>

<figure class='code'><figcaption><span>ViewController.m [ ]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">getTiles</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">tiles</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tiles</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;shapes&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Shapes&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">255</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">254</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;cow2&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Animals&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">255</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;abc&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;ABC&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">128</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">1</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;truck_tanks4&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Things that Go&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">129</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">127</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;numbers1&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Numbers&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">254</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;food&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Food&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">255</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">255</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;colors&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Colors&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">255</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">165</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">0</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;world1&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Around the World&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">108</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">183</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">189</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;random1&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Random&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">165</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">43</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">42</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>
</span><span class='line'>             <span class="p">[[</span><span class="n">Tile</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;support&quot;</span><span class="p">]</span> <span class="nl">andTitle:</span><span class="s">@&quot;Support&quot;</span> <span class="nl">andColor:</span><span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mi">169</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">green:</span><span class="mi">169</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">blue:</span><span class="mi">169</span><span class="o">/</span><span class="mf">255.0</span> <span class="nl">alpha:</span><span class="mi">1</span><span class="p">]],</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">tiles</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally I have a the placeTiles method. This is where it all comes together. This method steps trough the
array and adds the tiles to the view.</p>

<figure class='code'><figcaption><span>ViewController.m [ ]  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">placeTiles</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//button width set to half screen size and height to a third of the screen size</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">screenRect</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">tileWidth</span> <span class="o">=</span> <span class="n">screenRect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">tileHeight</span> <span class="o">=</span> <span class="n">screenRect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">intXSpacing</span> <span class="o">=</span> <span class="n">tileWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">intYSpacing</span> <span class="o">=</span> <span class="n">tileHeight</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">intTagNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">intXTile</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">intYTile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//get tiles that will represent the button data</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tileCount</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">tiles</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">getTiles</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Tile</span> <span class="o">*</span><span class="n">tile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">kButtonRows</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">kButtonColumns</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">intXTile</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">intXSpacing</span><span class="p">);</span>
</span><span class='line'>            <span class="n">intYTile</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">*</span> <span class="n">intYSpacing</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//get reference to a tile</span>
</span><span class='line'>            <span class="n">tile</span> <span class="o">=</span> <span class="p">[</span><span class="n">tiles</span> <span class="nl">objectAtIndex:</span><span class="n">tileCount</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//create new button and set its frame with the tileWidth TileHeight and its x and y location</span>
</span><span class='line'>            <span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIButton</span> <span class="nl">buttonWithType:</span><span class="n">UIButtonTypeCustom</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="nl">setFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">intXTile</span><span class="p">,</span> <span class="n">intYTile</span><span class="p">,</span> <span class="n">tileWidth</span><span class="p">,</span> <span class="n">tileHeight</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//set the button imageView to fit the tile image within the Aspect Ratio then set the image to the tile.tileImage</span>
</span><span class='line'>             <span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">].</span><span class="n">imageView</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="n">UIViewContentModeScaleAspectFit</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="nl">setImage:</span><span class="n">tile</span><span class="p">.</span><span class="n">tileImage</span> <span class="nl">forState:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//add a TouchDown target </span>
</span><span class='line'>            <span class="p">[</span><span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">actionPick:</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="n">UIControlEventTouchDown</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">].</span><span class="n">adjustsImageWhenHighlighted</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>            <span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">].</span><span class="n">adjustsImageWhenDisabled</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//set button Tag</span>
</span><span class='line'>            <span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">].</span><span class="n">tag</span> <span class="o">=</span> <span class="n">intTagNumber</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//set background color</span>
</span><span class='line'>            <span class="p">[</span><span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="nl">setBackgroundColor:</span><span class="n">tile</span><span class="p">.</span><span class="n">tileColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//add to view</span>
</span><span class='line'>             <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">buttons</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//get ready for next iteration- increment tagNumber and tileCount</span>
</span><span class='line'>             <span class="n">intTagNumber</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">tileCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what have I learned so far? Compared to the MVVM pattern with WP7, off the self without creating your own
data binding solution in iOS or Android, creating a UI takes a significant amount more code in iOS and Android both. I will keep
posting as I get further along in the app. Next up will be the creation of the &ldquo;Card deck&rdquo; or gallery.</p>

<p>Also, check out this <a href="http://www.codeproject.com/Articles/166952/MVVM-in-Android">MVVM library</a> for Android. Could bring some MVVM goodness to Android.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First!]]></title>
    <link href="http://charlesbking.com/blog/2012/06/05/hello/"/>
    <updated>2012-06-05T20:48:00-07:00</updated>
    <id>http://charlesbking.com/blog/2012/06/05/hello</id>
    <content type="html"><![CDATA[<p>First post! I went all out and started an Octopress based blog.  This was partly just to challenge myself as Octopress is not your average
wordpress blog. However, if you are used to the command line and somewhat familiar with ruby or git, you will feel right at home. Check it out
<a href="http://octopress.org/">here</a>. The theme I am using <a href="https://github.com/tommy351/Octopress-Theme-Slash">Slash</a>. Anyways
why this blog? I wanted to provide a place for me to organize my thoughts and ramblings on programming,
working in IT and specifically working IT in non-desirable places, like a basement. So I don&rsquo;t know how much I will
have to say, however I will post as I learn new and cool things about my adventures in coding and/or life. Enjoy!</p>
]]></content>
  </entry>
  
</feed>
